{"Name":"Firebase - Auth","Id":3321,"Alias":"firebase-auth","Description":"Firebase - Authentication\n==========================\n\nMost apps need to know the identity of a user. Knowing a user\u0027s identity allows an app to securely save user data in the cloud and provide the same personalized experience across all of the user\u0027s devices.\n\nFirebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, popular federated identity providers like Google, Facebook and Twitter, and more.\n\nFirebase Authentication integrates tightly with other Firebase services, and it leverages industry standards like OAuth 2.0 and OpenID Connect, so it can be easily integrated with your custom backend.\n\n## Key capabilities\n\nYou can sign in users to your Firebase app either by using FirebaseUI as a complete drop-in auth solution or by using the Firebase Authentication SDK to manually integrate one or several sign-in methods into your app.\n\n#### FirebaseUI\n\nEasily add a complete sign-in system to your app. FirebaseUI provides a drop-in auth solution that handles the UI flows for signing in users with email addresses and passwords, Google Sign-In, and Facebook Login.\n\nThe FirebaseUI Auth component implements best practices for authentication on mobile devices and websites, which can maximize sign-in and sign-up conversion for your app. It also handles edge cases like account recovery and account linking that can be security sensitive and error-prone to handle correctly.\n\nFirebaseUI can be easily customized to fit in with the rest of your app\u0027s visual style, and it is open source, so you aren\u0027t constrained in realizing the user experience you want.\n\n\n\n#### Email and password based authentication\t\n\nAuthenticate users with their email addresses and passwords. The Firebase Authentication SDK provides methods to create and manage users that use their email addresses and passwords to sign in. Firebase Authentication also handles sending password reset emails.\n\n\n\n#### Federated identity provider integration\t\n\nAuthenticate users by integrating with federated identity providers. The Firebase Authentication SDK provides methods that allow users to sign in with their Google, Facebook, Twitter, and GitHub accounts.\n\nYou can also connect your app\u0027s existing sign-in system to the Firebase Authentication SDK and gain access to Firebase Realtime Database and other Firebase services.\n\n\n\n#### Anonymous auth\t\n\nUse Firebase features that require authentication without requiring users to sign in first by creating temporary anonymous accounts. If the user later chooses to sign up, you can upgrade the anonymous account to a regular account, so the user can continue where they left off.\n\n","Version":"42.1001.0.0","Summary":"Easily support authentication in your app using passwords, or popular federated identity providers like Google, Facebook, and more.","QuickStart":"Get Started with Firebase Authentication for Android\n\n\nConfiguring Firebase\n--------------------\n\n1. Create a Firebase project in the [Firebase Console][1], if you don\u0027t already have one setup.  If you have an existing Google project associated with your mobile app, you can use the **Import Google Project** option.  Otherwise, use the **Create New Project** option.\n\n2. Click **Add Firebase to your Android app**.  \n\n  a. Enter your app\u0027s ***Package Name***\n  \n  b. Enter the SHA-1 Hash for your signing certificate.  If you don\u0027t know how to find this, [check out this guide][2]\n\n3. Click **Add App** and download the ***google-services.json*** file generated for you.\n\n4. Add the ***google-services.json*** file to your Xamarin.Android project.\n\n5. Set the *Build Action* for your ***google-services.json*** file to ***GoogleServicesJson***.  \n\nThe build process will take the api keys and values from your ***google-services.json*** and translate them into the correct resource string key/value pairs in your app.\n\n\n\n\n\n\n\n\n## Manage Users in Firebase\n\n\n### Create a User\n\nYou create a new user in your Firebase project by calling the `CreateUserWithEmailAndPassword` method or by signing in a user for the first time using a federated identity provider, such as Google Sign-In or Facebook Login.\n\nYou can also create new password-authenticated users from the Authentication section of the Firebase console, on the Users page.\n\n\n### Get the currently signed-in user\n\nThe recommended way to get the current user is by subscribing to the `AuthState` event:\n\n```csharp\nFirebaseAuth.Instance.AuthState += (sender, e) =\u003e {\n    var user = e?.Auth?.CurrentUser;\n\n    if (user != null) {\n        // User is signed in\n    } else {\n        // User is signed out\n    }\n};\n```\n\nBy subscribing to the event, you ensure the Auth object isn\u0027t in an intermediate state - such as initialization - when you get the current user.\n\nYou can also get the currently signed-in user by accessing the  `FirebaseAuth.Instance.CurrentUser` property.  If a user isn\u0027t signed in, the result will be `null`.\n\n```csharp\nvar user = FirebaseAuth.Instance.CurrentUser;\nvar signedIn = user != null;\n```\n\n\n### Get a user\u0027s profile\n\nTo get a user\u0027s profile information, use the accessor methods of an instance of FirebaseUser. For example:\n\n```csharp\nvar user = FirebaseAuth.Instance.CurrentUser;\n\nif (user != null) {\n    // Name, email address, and profile photo Url\n    var name = user.DisplayName;\n    var email = user.Email;\n    var photoUrl = user.PhotoUrl;\n\n    // The user\u0027s ID, unique to the Firebase project. Do NOT use this value to\n    // authenticate with your backend server, if you have one. Use\n    // FirebaseUser.Token instead.\n    var uid = user.Uid;\n}\n```\n\n\n### Get a user\u0027s provider-specific profile information\n\nTo get the profile information retrieved from the sign-in providers linked to a user, use the `ProviderData` property. For example:\n\n```csharp\nvar user = FirebaseAuth.Instance.CurrentUser;\nif (user != null) {\n    foreach (IUserInfo profile in user.ProviderData) {\n        // Id of the provider (ex: google.com)\n        var providerId = profile.ProviderId;\n\n        // UID specific to the provider\n        var uid = profile.Uid;\n\n        // Name, email address, and profile photo Url\n        var name = profile.DisplayName;\n        var email = profile.Email;\n        var photoUrl = profile.PhotoUrl;\n    };\n}\n```\n\n\n\n### Update a user\u0027s profile\n\nYou can update a user\u0027s basic profile information—the user\u0027s display name and profile photo URL—with the `UpdateProfile` method. For example:\n\n```csharp\nvar user = FirebaseAuth.Instance.CurrentUser;\n\nvar profileUpdates = new UserProfileChangeRequest.Builder()\n        .SetDisplayName (\"Jane Q. User\")\n        .SetPhotoUri (Uri.Parse (\"https://example.com/user/profile.jpg\"))\n        .Build();\n\ntry {\n    await user.UpdateProfileAsync (profileUpdates);\n} catch (Exception ex) {\n    // Failed to update user profile\n}\n```\n\n\n\n### Set a user\u0027s email address\n\nYou can set a user\u0027s email address with the `UpdateEmail` method. For example:\n\n```csharp\nvar user = FirebaseAuth.Instance.gCurrentUser;\n\ntry {\n    await user.UpdateEmailAsync (\"user@example.com\");\n} catch (Exception ex) {\n    // Failed to update user email\n}\n```\n\n\n\n\n\n## Password Authentication\n\nYou will need to enable Email/Password sign-in in your Firebase console if you haven\u0027t already:\n\n 1. In the Firebase console, open the Auth section.\n 2. On the Sign in method tab, enable the ***Email/password*** sign-in method and click ***Save***.\n\n\n### Create a password-based account\n\nTo create a new user account with a password, complete the following steps in your app\u0027s sign-in activity:\n\nSet up an AuthState event handler that responds to changes in the user\u0027s sign-in state:\n\n```csharp\npublic void AuthStateChanged (object sender, FirebaseAuth.AuthStateEventArgs e)\n{\n\tvar user = e.Auth.CurrentUser;\n\t\n    if (user != null) {\n        // User is signed in\n    } else {\n        // User is signed out\n    }\n}\n\n// ...\n\npublic override void OnStart ()\n{\n    base.OnStart ();\n\n    FirebaseAuth.Instance.AuthState += AuthStateChanged;\n}\n\npublic override void OnStop ()\n{\n    base.OnStop ();\n    \n    FirebaseAuth.Instance.AuthState -= AuthStateChanged;\n}\n```\n\nWhen a new user signs up using your app\u0027s sign-up form, complete any new account validation steps that your app requires, such as verifying that the new account\u0027s password was correctly typed and meets your complexity requirements.\n\nCreate a new account by passing the new user\u0027s email address and password to `CreateUserWithEmailAndPasswordAsync`:\n\n```csharp\ntry {\n    await FirebaseAuth.Instance.CreateUserWithEmailAndPasswordAsync (email, password);\n} catch (Exception ex) {\n    // Sign-up failed, display a message to the user\n    // If sign in succeeds, the AuthState event handler will\n    //  be notified and logic to handle the signed in user can happen there\n    Toast.MakeText (this, \"Sign In failed\", ToastLength.Short).Show ();\n}\n```\n\nIf the new account was created, the user is also signed in, and the AuthState event is fired. In the event handler, you can use the `CurrentUser` property to get the user\u0027s account data.\n\n\n\n\n### Sign in a user with an email address and password\n\nThe steps for signing in a user with a password are similar to the steps for creating a new account. In your app\u0027s sign-in activity, do the following:\n\n\nSet up the AuthState event handler just like in the previous example, that responds to changes in the user\u0027s sign-in state:\n\nWhen a user signs in to your app, pass the user\u0027s email address and password to `SignInWithEmailAndPasswordAsync`:\n\n```csharp\ntry {\n    await FirebaseAuth.Instance.SignInWithEmailAndPasswordAsync (email, password);\n} catch (Exception ex) {\n    // Sign-in failed, display a message to the user\n    // If sign in succeeds, the AuthState event handler will\n    //  be notified and logic to handle the signed in user can happen there\n    Toast.MakeText (this, \"Sign In failed\", ToastLength.Short).Show ();\n}\n```\n\nIf sign-in succeeded, the AuthState event will fire. In the  event handler, you can use the `CurrentUser` property to get the user\u0027s account data.\n\n\nSamples\n=======\n\nYou can find a Sample Application within each Firebase component.  The sample will demonstrate the necessary configuration and some basic API usages.\n\n\n\n\n\n\nLearn More\n==========\n\nYou can learn more about the various Firebase SDKs \u0026 APIs by visiting the official [Firebase][5] documentation\n\n\n\n\n[1]: https://console.developers.google.com/ \"Google Developers Console\"\n[2]: https://developer.xamarin.com/guides/android/deployment,_testing,_and_metrics/MD5_SHA1/ \"Finding your SHA-1 Fingerprints\"\n[3]: https://developers.google.com/android/ \"Google APIs for Android\"\n[4]: https://firebase.google.com/console/ \"Firebase Developer Console\"\n[5]: https://firebase.google.com/ \"Firebase\"\n","Hash":"69cbb152c42b07260b18e1f2c41208e4","TargetPlatforms":["android"],"TrialHash":null}